


(?<align>\s*+\b__declspec[(]\s*+\balign[(]\s*+(?<alignnum>(?&numberliteralraw))\s*+[)]\s*+[)]\s*+)

(?<typename>\s*+[(]\s*+
(?<typenameinner>
	(?{push2 \@matches, {}})

	(?(?=
		(?{push2 \@savedcallouts, []})
		(?{++$recording; print3("recording typename\n")})

		((?&abstdeclorallqualifsqualifs)))

		|(?{pop2 \@savedcallouts})(?{--$recording; print3("minus minus typename $recording\n")})(?{pop2 \@matches})(*F))
		
	(?{--$recording})(?{push2 \@flags, {"optoutter"}})
	(?{push2 \@typenamequalifs, \@{$savedcallouts[-1]}; pop2 \@savedcallouts})
	
		\g{-1}(?{call 'identifier_decl'})
		(?&abstdecl)?+
		(?{call 'enddeclaration'})

		(?{pop2 \@flags, {"optoutter"}})
		(?{replayrecord \@typenamequalifs})
		(?{pop2 \@matches; pop2 \@typenamequalifs}))

		\s*+[)](?{call 'endqualifs'})\s*+
		
)

(?<abstrmostoutteropt>\s*+[(](?&abstdecl)[)]\s*+)

(?<abstrmostoutter>\s*+([(](?&abstdecl)[)]|(?&identifierminedecl))\s*+)

(?<abstrmostoutterparams>\s*+
			[(](?&abstdecl)[)]|
			(?(?=((?&identifierminedecl)))\g{-1}|(?{call 'identifier_decl'}))
\s*+)

(?<identifierminedecl>\s*+(?<ident>(?&identifierraw_qualified))
	(?{call 'register_decl'; call 'identifier_decl'})\s*+)

(?<Tabstrrestalt>
	(?(?{existsflag "outterparams", {"outter" => undef, "optoutter"}})
	
	(?(?=(?{push2 \@savedcallouts, []; push2 \@matches, {}})
		(?{++$recording; print3("recording abstrmostoutterparams subs\n")})
			(?{call 'identifier_decl'})((?&abstrsubs))(?{$matches[-1]{sub}=$^N}))(?{--$recording})
		(?{qr{\Q$matches[-1]{sub}\E}})(?{call replayrecord})(?{pop2 \@savedcallouts; pop2 \@matches})
		
		|(?{--$recording})(?{pop2 \@savedcallouts; pop2 \@matches})(?&abstrmostoutterparams))

	(?&abstrsubs)*+

	|(?(?{existsflag "outter", {"optoutter" => undef, "outterparams"}})(?&abstrmostoutter)(?&abstrsubs)*+
	|(?(?{existsflag "optoutter", {"outter" => undef, "outterparams"}})((?&abstrmostoutteropt)(?&abstrsubs)*+|(?&abstrsubs)++))))
	)

(?<Tinside>
	(?(?{existsflag "outterparams", {"outter" => undef, "optoutter"}})(?&abstrmostoutterparams)
	|(?(?{existsflag "outter", {"optoutter" => undef, "outterparams"}})(?&abstrmostoutter)
	|(?(?{existsflag "optoutter", {"outter" => undef, "outterparams"}}))(?&abstrmostoutteropt)?+))
	)

(?<param>(?{push2 \@flags, {"outterparams"=>undef,"nonopt"=>undef}})(?&abstdeclorallqualifs))

(?<closingparen>(?![(])[)])

(?<openparen>[(](?<![)]))

(?<abstrsubs>\s*+(\[(?{call 'beginconstantexpr'})(?&primexprnew)\]
						(?{call 'addsubtotype'})(?{call 'endconstantexpr'})
						|(?(?=(?<parenscap>(?&openparen)\s*+((\.\.\.)(?{$matches[-1]{rest}=$^N})|\bvoid\b)?+\s*+(?&closingparen))
						(?{call 'startfunctionparamdecl'})(?{call 'endfunctionparamdecl'}))
						\g{parenscap}
						|(?(?=(?{push2 \@savedcallouts, []})(?{push2 \@matches, {}})
						(?{++$recording; print3("recording abstrsubs firstparam\n"); })(?{call 'startfunctionparamdecl'})((?&openparen)(?&param)))
						\g{-1}
							(,(?(?=(\s*+(\.\.\.)(?{$matches[-1]{rest}=$^N})\s*+))\g{-2}|(?&param)))*+
						\s*+(?&closingparen)(?{--$recording})(?{replayrecord})(?{pop2 \@savedcallouts})(?{call 'endfunctionparamdecl'})(?{pop2 \@matches})
						|(?{--$recording})
						(?{pop2 \@savedcallouts})(?{pop2 \@matches})(*F)))
						)\s*+)

(?<abstdecl>\s*+(?<callconv>\b__stdcall\b\s*+(?{call 'setcallconv'}))?+
		(?(?=(?<abstrptrrev>(?<abstrptr>\s*+[*]\s*+(?<callconv>\b__stdcall\b\s*+(?{call 'setcallconv'}))?+
						(?<qualifptr>(?{push2 \@savedcallouts, []; ++$recording;})
							(?&qualifonly)*+
							(?{pop2 \@savedcallouts; --$recording;})
						)
						)
						(?(?!(?<foundabstr>(?&abstrptrrev))(?{call 'addptrtotype'}))
						(?<abstrrest>(?&Tinside)(?&abstrsubs)*+
						(?{call 'addptrtotype'}))|
						\g{foundabstr})))\g{abstrptrrev}|(?&Tabstrrestalt))
)

(?<callingconv>\b(__cdecl|__stdcall|__thiscall|__fastcall)\b)

(?<Tasbtdecloutter>
	(?&abstdecl)
)

(?<Tabstinitorbitfl>
	(?(?{existsflag "bitfl", {"nonbitfl"}})(?&abstrbitfield)|(?&abstrinitialization))
	)

(?<abstdeclorallqualifsqualifs>(?(?=((?&structorunion))(?{eval {$matches[-1]{strc}=$^N}}))\g{-1}|\s*+(?&typeorqualifortypdf)\s*+)++)

(?<abstdeclorallqualifsdestr>
	(?{push2 \@declqualifs, \@{$savedcallouts[-1]}; pop2 \@savedcallouts})

	(?(?=(?<declinner>(?&Tasbtdecloutter)(?{call 'enddeclaration'})(?{replayrecord \@declqualifs})(?{call 'endqualifs'})))\g{declinner}(?&Tabstinitorbitfl)?+
	(?(?{eval {existsflag "outterparams", {"outter" => undef, "optoutter"}} or 0})|(,(?&declinner))*+)|(?(?{print3("dump\n");eval {exists $matches[-1]{strc}} or 0})
	(?{print "is rec $recording \n"; call 'check_stray_struc' if (not eval {exists $matches[-1]{enum}})})
	|
	(?{pop2 \@flags, undef})
	(?{pop2 \@declqualifs})
	(?{pop2 \@matches})(*F)))

	(?{pop2 \@declqualifs})
	(?{pop2 \@matches}))

(?<abstdeclorallqualifs>
	
	(?{push2 \@matches, {}})

	(?(?=(?{push2 \@savedcallouts, []})
		(?{++$recording; print3("recording abstdeclorallqualifs\n")})

		((?&abstdeclorallqualifsqualifs)))

		(?{--$recording})
		\g{-1}
		|(?(?{eval {existsflag "opt", {"nonopt"}} or 0})
	(?{--$recording})
	(?{print3("opt??\n")})
	|
	(?{pop2 \@flags, undef})

	(?{pop2 \@savedcallouts})(?{--$recording})(?{pop2 \@matches})(*F)))
	
	(?&abstdeclorallqualifsdestr)

	(?{pop2 \@flags, undef})
)

(?<declopt>(?{push2 \@flags, {"outter"=>undef,"opt"=>undef, "nonbitfl"=>undef}})(?&abstdeclorallqualifs)(?(?!\s*+;)(?&compoundstatement)|\s*+;(?{call 'endfulldecl'})\s*+))
(?<decl>(?{push2 \@flags, {"outter"=>undef,"nonopt"=>undef, "nonbitfl"=>undef}})(?&abstdeclorallqualifs)\s*+;(?{call 'endfulldecl'})\s*+)

(?<cprogram>(?&declopt))


(?<typenamerev>(?(?=(?{push2 \@savedcallouts, []})
		(?{++$recording; print3("recording typenamerev\n")})(?<typenamerev1>(?&typename)))
		(?{--$recording})\g{typenamerev1}(?{push2 \@typenamecurrrecord, \@{$savedcallouts[-1]}; pop2 \@savedcallouts})
		(?&castexpr)
		(?{replayrecord \@typenamecurrrecord})(?{pop2 \@typenamecurrrecord})
		(?{call 'applycast'})
		
		|(?{pop2 \@savedcallouts})(?{--$recording})(*F))
)


(?<abstrbitfield>\s*+:\s*+(?{call 'beginconstantexpr'})(?&assignorsomething)(?{call 'endconstantexpr'}))
(?<designator>\s*+(\[(?&primexprnew)\]|\.\s*+(?&identifier))\s*+)
(?<initializer>(?&assignorsomething)(?{call 'extract'})|\s*+[{]((?&designator)++=)?+(?&initializer)?(,(?&initializer))*+,?+\s*+[}]\s*+)
(?<abstrinitialization>=(?{call 'begin_initializer'})(?&initializer)(?{call 'finalize_initializer'}))

(?<add_ident_to_enum_def>\s*+(?<identlasttag>(?&identifierraw_qualified))(?{call 'add_ident_to_enum_def'})\s*+)


(?<strcelem>(?{push2 \@flags, {"bitfl"=>undef, "outter"=>undef, "nonopt"=>undef}})(?&abstdeclorallqualifs)\s*+;\s*+)

(?<structbody>\s*+[{](?{push2 \@structbodystack, $recording; $recording = 0})(?(?{eval {exists $matches[-1]{enum}} or 0})(?{call 'begin_enumerator_def'})
	(?<enumerator>(?&add_ident_to_enum_def)
	((=(?{call 'beginconstantexpr'})(?&assignorsomething)(?{call 'end_ass_to_enum_def'}))
	|(?{call 'end_without_ass_to_enum_def'})))?+(,(?&enumerator))*+,?+\s*+
	|(?{call 'struc_or_union_body'})\s*+(?<strceleminf>(?&strcelem)*+((?&strcelem)(?&strceleminf))?+))\s*+
	[}]\s*+(?(?{eval {exists $matches[-1]{enum}} or 0})()|(?{call 'endbuildingstructorunion'}))\s*+(?{$recording = pop2 \@structbodystack}))

(?<structorunion>
	(?=(?<begin>\s*+\b(?<structorunionlast>struct|union|(enum)(?{$matches[-1]{enum}=$^N}))\b\s*+
	(((?&identifierminestruct))(?{$matches[-1]{lasttag}=$^N}))?+))\g{begin}
	(?(?=(?<body>(?&structbody)))\g{body}|(?(?{eval {exists $matches[-1]{lasttag}} or 0})|(*F)))
	(?{call 'add_tag'})
)

(?<taggableonly>(?&structorunion))

(?<identifierminestruct>(?&identifierraw_qualified))